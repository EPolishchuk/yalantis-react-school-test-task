{"version":3,"sources":["components/emlpoyee-birthdays/EmployeeBirthdays.tsx","components/emlpoyee-birthdays/EmployeeBirthdaysList.tsx","store/reducers/userSlice.ts","components/employee/Employee.tsx","components/employee-list/EmployeeList.tsx","App.tsx","reportWebVitals.ts","api/getEmployee.ts","api/handleGetEmployee.ts","store/sagas/rootSaga.ts","store/store.ts","index.tsx"],"names":["EmployeeBirthdays","props","formatDate","dateAsString","date","Date","getDate","toLocaleString","month","getFullYear","employees","length","sort","a","b","lastName","localeCompare","map","employee","firstName","dob","EmployeeBirthdaysList","employeeList","useSelector","state","activeList","filter","userSlice","createSlice","name","initialState","loading","reducers","loadEmployees","setEmployee","action","payload","addActiveStatus","find","id","push","removeActiveStatus","actions","Employee","dispatch","useDispatch","users","type","value","onClick","htmlFor","letter","EmployeeList","alphabet","Array","from","e","i","x","String","fromCharCode","App","useEffect","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getEmployee","axios","get","handleGetUser","call","response","data","put","console","log","exportSaga","takeLatest","sagaMiddleware","createSagaMiddleware","configureStore","reducer","middleware","getDefaultMiddleware","concat","run","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.8df68331.chunk.js","sourcesContent":["import React from 'react';\r\nimport { IEmployee } from '../../interface/Employee.interface';\r\n\r\nconst EmployeeBirthdays = (props: {\r\n  employees: IEmployee[];\r\n  month: string;\r\n}) => {\r\n  const formatDate = (dateAsString: string) => {\r\n    const date = new Date(dateAsString);\r\n    return `${date.getDate()} ${date.toLocaleString('en-us', {\r\n      month: 'long',\r\n    })}, ${date.getFullYear()}`;\r\n  };\r\n  return (\r\n    <div key={`${props.month}-employee-dob-list`}>\r\n      <h3>{props.month}</h3>\r\n      {props.employees.length ? (\r\n        props.employees\r\n          .sort((a, b) => a.lastName.localeCompare(b.lastName))\r\n          .map((employee) => (\r\n            <p>{`${employee.lastName} ${employee.firstName} â€” ${formatDate(\r\n              employee.dob\r\n            )}`}</p>\r\n          ))\r\n      ) : (\r\n        <p>No Employees</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeBirthdays;\r\n","import { useSelector } from 'react-redux';\r\nimport { IEmployee } from '../../interface/Employee.interface';\r\nimport { EmployeeState } from '../../interface/EmployeeState.interface';\r\nimport EmployeeBirthdays from './EmployeeBirthdays';\r\n\r\nconst EmployeeBirthdaysList = () => {\r\n  const employeeList = useSelector(\r\n    (state: EmployeeState) => state.employees.activeList\r\n  );\r\n  const monthNames = [\r\n    'November',\r\n    'December',\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n  ];\r\n  const getMonthName = (dateAsString: string) => {\r\n    const date = new Date(dateAsString);\r\n    return date.toLocaleString('en-us', { month: 'long' });\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <h1>Employees birthday</h1>\r\n      <div>\r\n        {employeeList?.length ? (\r\n          monthNames.map((month) => (\r\n            <EmployeeBirthdays\r\n              key={month}\r\n              month={month}\r\n              employees={employeeList.filter(\r\n                (employee: IEmployee) => month === getMonthName(employee.dob)\r\n              )}\r\n            ></EmployeeBirthdays>\r\n          ))\r\n        ) : (\r\n          <p>Employees List is empty</p>\r\n        )}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default EmployeeBirthdaysList;\r\n","import { IEmployee } from './../../interface/Employee.interface';\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'employee',\r\n  initialState: {\r\n    activeList: [] as IEmployee[],\r\n    employeeList: [] as IEmployee[],\r\n    loading: true,\r\n  },\r\n  reducers: {\r\n    loadEmployees: () => {},\r\n    setEmployee: (state, action) => {\r\n      state.employeeList = action.payload;\r\n      state.loading = false;\r\n    },\r\n    addActiveStatus: (state, action) => {\r\n      const alreadyInState = state.activeList.find(\r\n        (employee) => employee.id === action.payload.id\r\n      );\r\n      if (!alreadyInState) {\r\n        state.activeList.push(action.payload);\r\n      }\r\n    },\r\n    removeActiveStatus: (state, action) => {\r\n      state.activeList = state.activeList.filter(\r\n        (employee) => employee.id !== action.payload.id\r\n      );\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setEmployee,\r\n  loadEmployees,\r\n  addActiveStatus,\r\n  removeActiveStatus,\r\n} = userSlice.actions;\r\n\r\nexport default userSlice.reducer;\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { IEmployee } from '../../interface/Employee.interface';\r\nimport { EmployeeState } from '../../interface/EmployeeState.interface';\r\nimport {\r\n  addActiveStatus,\r\n  removeActiveStatus,\r\n} from '../../store/reducers/userSlice';\r\n\r\nconst Employee = (props: { letter: string }) => {\r\n  const ACTIVE = 1;\r\n  const NOT_ACTIVE = 0;\r\n  const dispatch = useDispatch();\r\n  const employees = useSelector(\r\n    (state: EmployeeState) => state.employees.employeeList\r\n  );\r\n  let loading = useSelector((state: EmployeeState) => state.employees.loading);\r\n  let users = [...employees];\r\n\r\n  return (\r\n    <div key={`${props.letter}-employee-list`}>\r\n      {!loading && users?.length ? (\r\n        users\r\n          .sort((a: IEmployee, b: IEmployee) =>\r\n            a.firstName.localeCompare(b.firstName)\r\n          )\r\n          .map((employee: IEmployee) => (\r\n            <>\r\n              <h5>{`${employee.firstName} ${employee.lastName}`}</h5>\r\n              <div>\r\n                <p>\r\n                  <input\r\n                    type='radio'\r\n                    name={employee.id}\r\n                    id={employee.id + ACTIVE}\r\n                    value={ACTIVE}\r\n                    onClick={() => dispatch(addActiveStatus(employee))}\r\n                  />\r\n                  <label htmlFor={employee.id + ACTIVE}>Active</label>\r\n                </p>\r\n                <p>\r\n                  <input\r\n                    type='radio'\r\n                    name={employee.id}\r\n                    id={employee.id + NOT_ACTIVE}\r\n                    value={NOT_ACTIVE}\r\n                    onClick={() => dispatch(removeActiveStatus(employee))}\r\n                  />\r\n                  <label htmlFor={employee.id + NOT_ACTIVE}>Not active</label>\r\n                </p>\r\n              </div>\r\n            </>\r\n          ))\r\n      ) : (\r\n        <p>No Employees</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Employee;\r\n","import Employee from '../employee/Employee';\r\n\r\nconst EmployeeList = () => {\r\n  const alpha = Array.from(Array(26)).map((e, i) => i + 65);\r\n  const alphabet = alpha.map((x) => String.fromCharCode(x));\r\n\r\n  return (\r\n    <section>\r\n      <h1>Employees</h1>\r\n      {alphabet.map((letter) => (\r\n        <div>\r\n          <h3 key={`${letter}-letters`}>{letter}</h3>\r\n          <Employee key={`${letter}-employees`} letter={letter}></Employee>\r\n        </div>\r\n      ))}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default EmployeeList;\r\n","import EmployeeBirthdaysList from './components/emlpoyee-birthdays/EmployeeBirthdaysList';\nimport EmployeeList from './components/employee-list/EmployeeList';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { loadEmployees } from './store/reducers/userSlice';\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadEmployees());\n  }, [dispatch]);\n\n  return (\n    <div className='employee'>\n      <EmployeeList></EmployeeList>\n      <EmployeeBirthdaysList></EmployeeBirthdaysList>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios';\r\nimport { IEmployee } from '../interface/Employee.interface';\r\n\r\nconst getEmployee = () => {\r\n  return axios.get<IEmployee[]>(\r\n    'https://yalantis-react-school-api.yalantis.com/api/task0/users'\r\n  );\r\n};\r\n\r\nexport default getEmployee;\r\n","import { AxiosResponse } from 'axios';\r\nimport { call, put } from 'redux-saga/effects';\r\nimport { setEmployee } from '../store/reducers/userSlice';\r\nimport getEmployee from './getEmployee';\r\n\r\nexport function* handleGetUser() {\r\n  try {\r\n    const response: AxiosResponse = yield call(getEmployee);\r\n    const { data } = response;\r\n    yield put(setEmployee([...data]));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n","import { loadEmployees } from '../reducers/userSlice';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport { handleGetUser } from '../../api/handleGetEmployee';\r\n\r\nexport function* exportSaga() {\r\n  yield takeLatest(loadEmployees.type, handleGetUser);\r\n}\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userSlice from './reducers/userSlice';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { exportSaga } from './sagas/rootSaga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    employees: userSlice,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(sagaMiddleware),\r\n});\r\nsagaMiddleware.run(exportSaga);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}